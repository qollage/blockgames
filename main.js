const HEIGHT=400;const WIDTH=400;class View{constructor(canvas,width,height){this.canvas=canvas;this.canvas.height=width;this.canvas.width=height;this.ctx=this.canvas.getContext("2d");this.height=width;this.width=height;} update(model){this.ctx.clearRect(0,0,this.width,this.height);this.ctx.beginPath();this.ctx.arc(model.ball.x,model.ball.y,model.ball.r,0,2*Math.PI);this.ctx.stroke();this.ctx.fill();this.ctx.beginPath();this.ctx.rect(model.paddle.left(),model.paddle.up(),model.paddle.width,model.paddle.height);this.ctx.stroke();this.ctx.fill();model.blocks.forEach((b)=>{if(b.hidden){return;} this.ctx.beginPath();this.ctx.rect(b.left(),b.up(),b.width,b.height);this.ctx.stroke();this.ctx.fill();});}} class Block{constructor(x,y){this.width=90;this.height=10;this.x=x;this.y=y;this.hidden=false;} left(){return this.x-this.width/2;} right(){return this.x+this.width/2;} up(){return this.y-this.height/2;} down(){return this.y+this.height/2;} judge(ball){if(Math.abs(this.up()-ball.y)<=ball.r||Math.abs(this.down()-ball.y)<=ball.r){if(this.left()<ball.x+ball.r&&this.right()>ball.x-ball.r){this.hidden=true;if(ball.x>this.left()&&ball.x<this.right()){ball.reflectY();}else{ball.reflectX();}}}}} class Paddle{constructor(x,y){this.x=x;this.y=y;this.width=100;this.height=10;} left(){return this.x-this.width/2;} right(){return this.x+this.width/2;} up(){return this.y-this.height/2;} down(){return this.y+this.height/2;} moveLeft(){this.x-=10;} moveRight(){this.x+=10;} isCollided(ball){if(Math.abs(this.up()-ball.y)<ball.r||Math.abs(this.down()-ball.y)<ball.r){if(ball.x>this.left()&&ball.x<this.right()){return true;} return false;}}} class Ball{constructor(x,y){this.x=x;this.y=y;this.vx=0.5;this.vy=1;this.r=10;} next(){this.x+=this.vx;this.y+=this.vy;} left(){return this.x-this.r;} right(){return this.x+this.r;} up(){return this.y-this.r;} down(){return this.y+this.r;} reflectY(){this.vy*=-1;} reflectX(){this.vx*=-1;}} class BlockBreaking{constructor(width,height){this.height=width;this.width=height;const initX=100;const initY=200;this.ball=new Ball(initX,initY);this.paddle=new Paddle(200,300);this.blocks=[];for(let i=0;i<4;i++){for(let j=0;j<3;j++){this.blocks.push(new Block((j+1)*100,(i+4)*20));}} this.gameOver=false;} next(){if(this.ball.down()>this.height){this.gameOver=true;} if(this.ball.up()<0){this.ball.reflectY();} if(this.ball.left()<0||this.ball.right()>this.height){this.ball.reflectX();} if(this.paddle.isCollided(this.ball)){this.ball.reflectY();} this.blocks.forEach((b)=>{if(b.hidden){return;} b.judge(this.ball);});if(this.blocks.every((b)=>b.hidden)){this.gameOver=true;} this.ball.next();} moveRight(){if(this.paddle.right()>=this.width){return;} this.paddle.moveRight();} moveLeft(){if(this.paddle.left()<=0){return;} this.paddle.moveLeft();}} class Flame{constructor(width,height,canvas,window){this.height=width;this.width=height;this.intervalId=null;this.keyEventListener=null;this.view=new View(canvas,this.width,this.height);this.model=new BlockBreaking(this.width,this.height);this.window=window;} start(){this.intervalId=setInterval(()=>this.next(),10);this.keyEventListener=(e)=>this.handleKeyEvent(e);this.window.addEventListener("keydown",this.keyEventListener);} handleKeyEvent(e){if(e.key==="ArrowRight"){this.model.moveRight();} if(e.key==="ArrowLeft"){this.model.moveLeft();}} next(){this.model.next();this.view.update(this.model);if(this.model.gameOver){this.stop();}} stop(){clearInterval(this.intervalId);this.window.removeEventListener("keydown",this.keyEventListener);}} const canvas=document.getElementById("canvas");const flame=new Flame(WIDTH,HEIGHT,canvas,window);flame.start();